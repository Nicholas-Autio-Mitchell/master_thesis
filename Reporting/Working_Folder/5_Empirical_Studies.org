
#+latex_header: \usepackage{enumitem}  %% for lists (in algorithm)         
#+latex_header: \usepackage{mathtools} %% for \coloneqq
#+latex-header: \@addtoreset{algorithm}{chapter}% algorithm counter resets every chapter

#+latex_header: \usepackage{pdflscape}                                   
#+latex_header: \usepackage{afterpage}                                   
#+latex_header: \usepackage{capt-of}  % or use the larger `caption` package
#+latex-header: \usepackage{caption}

#+latex_header: \usepackage[bottom]{footmisc} %% to keep entire footers on one page
#+LATEX_HEADER: \usepackage[]{graphicx}
#+LATEX_HEADER: \usepackage[]{minted} 
#+LATEX_HEADER: \usepackage[a4paper,margin=1in]{geometry} 
#+LATEx_HEADER: \usepackage{comment}
#+latex_header: \usepackage[linesnumbered,ruled,lined,shortend]{algorithm2e}
#+latex_header: \usepackage[space]{grffile}

#+OPTIONS: todo:nil
#+OPTIONS: H:4
#+OPTIONS: num:4

\pagebreak

* DONE Empirical studies <<chapter-empirical-studies>>


** DONE Financial market data acquisition

Here, a brief summary of the traditional financial data used in this study is presented. Daily data for numerous market segments was collected, using free online sources[fn::A mixture of [[http://finance.yahoo.com/][Yahoo Finance^\dag]] and [[https://www.quandl.com/collections/markets][Quandl^\dag]] was used - please visit them for more information on their original sources. Interfaces were provided by the R packages [[https://cran.r-project.org/web/packages/quantmod/index.html][/quantmod^\dag/]] and [[https://cran.r-project.org/web/packages/Quandl/index.html][/Quandl^\dag/]], respectively.]. Market data is freely available for time-spans that greatly surpass that of Twitter data (and social media data in general[fn::Market data can be obtained for many indices and assets deep into the last century, whereas social media data older than ten years old is extremely rare.]), which amounts to the fact that the scraped Twitter data is the limiting factor regarding the time-series length used for this study. Table [[tab:fin-data]] summarises the final market data, categorised by the asset class from which each variable stems. All obtained market data was of daily frequency. The timeline used ranges from 14^th January 2013 until 11^th September 2015, which equates to a total of 971 days, with a total of 695 /weekdays/. The term /weekdays/ is intentionally specified, in place of /business days/, as bank holidays in North America remained part of the timeline for modelling[fn::A detailed listing of the bank holidays can be found in Appendix [[pub-holidays]].].

A total of seven asset classes were included, covering the majority of traditional stock markets (although futures markets were not included). Options are indirectly incorporated via several indicators for market volatility, e.g. the VIX volatility index (ID 26 in Table [[tab:fin-data]]) is a metric derived from the implied volatility of highly liquid options[fn::The exact methods of calculation can be found in the relevant white paper from the [[https://www.cboe.com/micro/vix/vixwhite.pdf][Chicago Board Options Exchange^\dag.]]]. The single exchange traded fund (ETF) (ID 12) was chosen to represent emerging markets, with the majority of other assets prevalent only in developed economies. The gold and copper spreads (with IDs 27 and 28) were derived as the nominal spread between the spot and three month prices, as a supplementary proxy to short term volatility. The *Reference* column provides the unique /ticker/ or name that is used by the corresponding *Data Provider*. /Quandl/ uses many sources of data (see footnotes for more information), whereas (for this study) the /quantmod/ package in R was used as a convenient interface to Yahoo Finance data. In several cases, only one reference is given, which returns the data for several of the variables. For example, all zero-coupon bond data is returned for all maturities from one database call. This is indicated in Table [[tab:fin-data]] as appropriate.

#+attr_latex: :placement \  
#+Caption[A breakdown of all financial market data used]: A summary of the financial market data to be paired with sentiment analysis results. Daily frequency was obtained for all data, meaning no interpolation was necessary. Imputation was performed using the LOCF method.
#+Name: tab:fin-data
| *ID* |   | *Asset class*         | *Asset*                | *Data source* | *Reference*       |
|      |   |                       |                        |               |                   |
|------+---+-----------------------+------------------------+---------------+-------------------|
| <c>  |   |                       |                        | <c>           |                   |
|      |   |                       |                        |               |                   |
| 1    |   |                       | Gold spot              |               | =LBMA/GOLD=       |
| 2    |   |                       | Gold 3M                |               | (as above)        |
| 3    |   | Commodities           | Copper spot            | Quandl        | =LME/PR_CU=       |
| 4    |   |                       | Copper 3M              |               | (as above)        |
| 5    |   |                       | Oil (WTI)              |               | =CHRIS/ICE_T1=    |
| 6    |   |                       | Natural gas            |               | =OFDP/FUTURE_NG1= |
|      |   |                       |                        |               |                   |
|------+---+-----------------------+------------------------+---------------+-------------------|
|      |   |                       |                        |               |                   |
| 7    |   |                       | USD-AUD                |               | =CURRFX/USDAUD=   |
| 8    |   |                       | USD-CAD                |               | =CURRFX/USDCAD=   |
| 9    |   | Currency pairs        | USD-EUR                | Quandl        | =CURRFX/USDEUR=   |
| 10   |   |                       | USD-GBP                |               | =CURRFX/USDGBP=   |
| 11   |   |                       | USD-JPY                |               | =CURRFX/USDJPY=   |
|      |   |                       |                        |               |                   |
|------+---+-----------------------+------------------------+---------------+-------------------|
|      |   |                       |                        |               |                   |
| 12   |   | Exchange traded fund  | MSCI Emerging Markets  | quantmod      | =EEM=             |
|      |   |                       |                        |               |                   |
|------+---+-----------------------+------------------------+---------------+-------------------|
|      |   |                       |                        |               |                   |
| 13   |   |                       | Zero-coupon 1Y         |               | =FED/SVENY=       |
| 14   |   |                       | Zero-coupon 2Y         |               | (as above)        |
| 15   |   | Fixed income          | Zero-coupon 5Y         | Quandl        | (as above)        |
| 16   |   | (US bonds)            | Zero-coupon 10Y        |               | (as above)        |
| 17   |   |                       | Zero-coupon 15Y        |               | (as above)        |
| 18   |   |                       | Zero-coupon 20Y        |               | (as above)        |
|      |   |                       |                        |               |                   |
|------+---+-----------------------+------------------------+---------------+-------------------|
|      |   |                       |                        |               |                   |
| 19   |   |                       | DAX          (Germany) |               | =^GDAXI=          |
| 20   |   |                       | Dow Jones    (U.S.)    |               | =^DJI=            |
| 21   |   | Stock indices         | FTSE100      (U.K.)    | quantmod      | =^FTSE=           |
| 22   |   |                       | Nikkei 225   (Japan)   |               | =^N225=           |
| 23   |   |                       | S&P500       (U.S.)    |               | =^GSPC=           |
| 24   |   |                       | Shanghai SE  (China)   |               | =000001.SS=       |
|      |   |                       |                        |               |                   |
|      |   |                       |                        |               |                   |
|------+---+-----------------------+------------------------+---------------+-------------------|
|      |   |                       |                        |               |                   |
| 25   |   |                       | VXD (Dow Jones)        |               | =CBOE/VXD=        |
| 26   |   | Volatility indicators | VIX (S&P500)           | Quandl        | =YAHOO/INDEX_VIX= |
| 27   |   |                       | Gold spread            |               | (derived)         |
| 28   |   |                       | Copper spread          |               | (derived)         |
|      |   |                       |                        |               |                   |
|------+---+-----------------------+------------------------+---------------+-------------------|
|      |   |                       |                        |               |                   |


** DONE Data preparation <<data_prep>>


*** DONE Data transformations <<data-trans>>

The combined output of Chapters [[chapter-twitter-mining]] and [[sentiment-analysis-chapter]] consists of the sentiment of individual tweets for each of the thirteen search terms over a two year eight month period. This forms one half of the data set to be used, which necessitated further manipulation before being combined with financial market data for modelling. Aggregating to daily frequency was a requirement, and there were several ways to to do this. This following sub-sections outline how this was achieved.


**** DONE Re-scaling sentiment scores <<rescaling-sent>>

The results that were returned from the five sentiment analysis models (at the individual tweet level) were all on slightly different scales. Although within the same orders of magnitude, $\pm 10$, they were re-scaled to be spread over the same range for consistency's sake. This also facilitated the combination of data from the different models, as discussed in the Section [[combined-sent]]. When re-scaling the sentiment scores, it was important to retain the meaning that the scores conveyed, i.e. a positive value conveyed a positive sentiment, and vice versa. Therefore it was not an option to simply normalise the data, giving it a mean value of zero and a desired variance, as this would have inevitably meant that some individual scores would cross the /zero-boundary/, thereby changing their sign and losing their true meaning. The method that was therefore used, was to merely reduce their magnitudes, so that the maximum score within one set of tweets[fn::One set signifies the tweets for one search term, for one sentiment analysis model. Thirteen search terms and five models gave sixty-five initial data sets.] was equal to one. This was achieved by simply dividing the scores for each data set by the maximum scores in that set. In the special case of the SentiStrength data, which produces a binary output, the two response were first averaged - creating a single score for each tweet - before being re-scaled to the same range as the other sentiment scores: $[-1, 1]$.


**** DONE Weighted aggregation of sentiment scores <<weighting-sentiment>>

The second form of aggregation that was necessary to perform on the Twitter data, was to ensure that each of the thirteen search terms provided a /single/ score for each day (from each of the five sentiment models). This aggregation was a necessary step to match the frequency of the financial market data. In this step, the additional meta data that was /scraped/ for each tweet was brought into use. Instead of computing the average score for each day over all tweets, each tweet's individual score was first weighted, by using both the number of times that it was /retweeted/ as well as the number of times it was marked as a /favourite/ by another user. The reasoning behind this step may be explained as follows: if one tweet has a score of e.g. $+2$, this means one person has a positive sentiment concerning the matter that was tweeted. If then five additional people retweeted or favourited that tweet, they thereby show their agreement with that tweet, and so the underlying sentiment is magnified in its interpretation. Therefore, a tweet that has been retweeted and favourited many times should logically carry more weight into the required average for that day, as it represents the opinion of a greater number of people. Let a /tweet event/ be defined as one additional opinion, i.e. one retweet or one marking as a favourite. Given this, the methodology used for weighting a single tweet may be summarised as follows:

#+Name: eqn-reweight
#+BEGIN_SRC latex
  \begin{equation}
    score_{weighted} = \left( \frac {\tau }{ \sum_{i = 1}^{N} \tau_{i} } \right) \cdot score_{original}
    \label{eqn-reweight}
  \end{equation}
#+END_SRC

\vspace{3mm}

where $\tau$ is the total events for the tweet being weighted and $N$ is the number of tweets on the day in question. This means the denominator represents the total sum of tweet events on that day, for that specific search term. Using this, the sentiment score for each day reflects the sentiment found on Twitter with an added amount of precision.


*** DONE Imputation <<imputation>>

As was touched upon in Section [[final-output]], there was a negligible proportion of missing data in the sentiment analysis results (< 1 %). The majority of missing data, throughout both the financial market and sentiment analysis data sets (weekends having been removed) could be contributed to public holidays. As the vast majority of the data listed in Table [[tab:fin-data]] was obtained from American markets, only official public holidays from America were considered. Over the 695 period timeline there were a total of 25 public holidays (\approx 3.6 % of the periods), which are detailed in Table [[tab:public-holidays]], Section [[pub-holidays]]. The weekends were removed from the sentiment analysis data, in order to be combined with the market data.

Even though the percentage of missing data within the entire data set (including sentiment data and market data) fell below 1 % after removing weekends, the component-wise boosting models do not (by default) tolerate missing data. Therefore it was necessary to use a method of imputation; the method selected was that of /last observation carried forward/ (LOCF). This must be carried out before the log-returns are computed[fn::Otherwise the result from that computation would be twice as many missing data points, when using the =diff()= function within R.]. Using LOCF implies then that the log-return is simply equal to zero on days where no data was received, as the difference would be zero between the imputed day and its preceding day. Additionally, imputing the data instead of removing the data was not able to create a large bias, as there are so few missing data points. Other methods of imputation that were considered include splines, k-Nearest Neighbour and variable modelling[fn::This involves modelling each individual variable in a way that allows one to impute the variable using its own distribution.]; however, as the proportion of missing data was so low, these more complicated methods were not warranted. As the public holidays were imputed, a dummy variable was created to make use of the information, if possible[fn::See Section [[dummy-vars]], where the inclusion of public holidays and other deterministic factors were included in the model.].


*** DONE Derived variables


**** DONE Weekend sentiment <<weekend-sent>>

The sentiment analysis data was collected over a total of 971 days, in continuous time, without any breaks. This means there was sentiment data available from the weekends that could not be directly modelled alongside market data, which is only for weekdays. In an attempt to capture sentiment from the weekend, a new variable was created that incorporated sentiment data from each weekend, and was used in modelling the following Monday's returns[fn::This variable was constructed out of the intuition that it makes sense that sentiment scores from the weekend should reflect the opinions of people who may make trades on the following Monday. However, no thorough statistical analysis was performed in the construction of this new variable.].

In order to extract the weekend sentiment, the values from each Friday, Saturday and Sunday were grouped into one mean value, which replaced the original value for the same Friday[fn::One could imagine a more complicated method of combining the sentiment scores for future work. For example, it is theoretically possible to weight the tweets, giving more weight to those closer to the Monday, to reflect a belief that /younger/ sentiment scores reflect more relevant opinions, and so exponential smoothing could be used, for example.]. This final Friday value was the value to be used in predicting the next day, i.e. the immediately following Monday. By not using any information at or further ahead of in time than the outcome variable, there is no violation of temporal information flow. For this new variable, only three of the thirteen search terms were selected; "Dow Jones", "federal reserve" and "stock prices". This is because the interpretation regarding the underlying sentiment becomes rather difficult once more are combined. The three terms were chosen due to their obvious correlation in underlying sentiment with market movements. Figure [[fig:wwp]] illustrates the combined sentiment score of the newly derived variable against movements of the DJIA - the weekends are shaded, and the lack of market data is noticeable by zero returns on the shaded regions. It can be observed that the movement of the sentiment over the weekend coincides with a market movement in the same direction for the second and third of the three weekends. Furthermore, it can be seen that the sentiment rises over all three Mondays (the segments directly following the shaded regions), which reflects the market movements on the first Monday and precedes the Market's actual upwards movement in the second and third weeks.

#+attr_latex: :width 16cm
#+Caption[An illustration of weekend sentiment as a predictor]: A comparison between the derived weekend sentiment variable (an average of three single sentiment variables) against the log returns of the DJIA. Dates are taken from 2013, with weekends highlighted by grey rectangles. 
#+Name: fig:wwp
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/weekend_sentiment_variable.png]]


**** DONE Combined sentiment models <<combined-sent>>

As mentioned above, five sentiment analysis models were used to score the tweets. A last set of variables were created in order to condense the sentiment data into fewer variables. This was performed simply by using the mean over all five sentiment analysis models, for each of the thirteen search terms. These variables were used in the creation of more succinct data sets, which can be seen and compared to the other in Section [[subsets]].


**** DONE Dummy variables <<dummy-vars>>

Certain facets of time-series data are deterministic: these dummy variables relate to the days of the week. Two dummy variables (DVs) were created in the hope that the component-wise boosting methodology would be able to use them; at the same time knowing, however, that they would not be promoted by the model if no effect was noticeable due to their inclusion. Both DVs relate to days and dates, with the first returning either a 1 or 0, stating whether the day is a Monday or not, respectively. The second DV answers a similar question, making use of the known public holidays (as discussed in Section [[imputation]]), stating simply whether a day was a public holiday or not.

When creating the lagged variables for each data set (described in Section [[lagged-subsets]]), these two DVs were able to, additionally, be included alongside the outcome variable, without being lagged. This is because, if it is believed that stocks perform badly on Mondays, it is known in advance that Monday is coming and so traders may adjust their strategies accordingly. The information is deterministic. For more ideas into the realm of deterministic cyclic trading patterns, see cite:gondhalekar2003blue and cite:kamstra2003winter.


*** DONE Final subsets for comparative modelling <<subsets>>

The last step in data pre-processing was to organise the data in a way that allowed a direct measure of the benefit that adding sentiment data to market data supplied. To do this, five data sets were defined - their names, contents and reasoning are explained in Table 6. The data sets displayed were then later increased in size when predictor variables were lagged. The largest data set was the /combined/ data set, with 693 predictor variables, which is two greater than the number of observations, 691[fn::Without any lagged variables, the timeline includes 695 days; however, when creating lagged variables, the timeline is reduced in length by one day for each additional lag.].

\afterpage
\clearpage
\thispagestyle{empty}
\begin{landscape} \hspace{1pt}
\centering

|   |                   |   |        |   |                                                    |                                                          |
|   | *Subset name*     |   | $\sum$ |   | *Contents*                                         | *Reasoning*                                              |
|   |                   |   |        |   |                                                    |                                                          |
|---+-------------------+---+--------+---+----------------------------------------------------+----------------------------------------------------------|
|   |                   |   | <c>    |   |                                                    |                                                          |
|   |                   |   |        |   |                                                    |                                                          |
|   |                   |   |        |   | A selection of six of market data variables:       | A benchmark model that should perform satisfactorily,    |
|   | traditional_small |   | 6      |   | S&P500, gold (spot), oil, USD-EUR, and             | and allow for fair comparison with fitting methods       |
|   |                   |   |        |   | 1o year zero-coupon bond yield                     | that do not have inherent method of variable selection.  |
|   |                   |   |        |   |                                                    |                                                          |
|---+-------------------+---+--------+---+----------------------------------------------------+----------------------------------------------------------|
|   |                   |   |        |   |                                                    |                                                          |
|   |                   |   |        |   | All market data, as listed in Table [[tab:fin-data]],  | To combine and showcase component-wise boosting,         |
|   | traditional_large |   | 36     |   | plus dummy variables (Section [[dummy-vars]])          | being able to select the strongest candidates for        |
|   |                   |   |        |   |                                                    | a model with traditional predictors.                     |
|   |                   |   |        |   |                                                    |                                                          |
|---+-------------------+---+--------+---+----------------------------------------------------+----------------------------------------------------------|
|   |                   |   |        |   |                                                    |                                                          |
|   |                   |   |        |   | Sentiment results for each search term             | A compact collection of the sentiment analysis results.  |
|   | sentiment_small   |   | 22     |   | averaged over the five sentiment models,           | as with traditional_small, a benchmark model to show the |
|   |                   |   |        |   | plus dummy variables (Section [[dummy-vars]])          | predictive power of sentiment scores by themselves.      |
|   |                   |   |        |   |                                                    |                                                          |
|---+-------------------+---+--------+---+----------------------------------------------------+----------------------------------------------------------|
|   |                   |   |        |   |                                                    |                                                          |
|   |                   |   |        |   | All sentiment results: each search                 | To allow boosting to select the very best components     |
|   | sentiment_large   |   | 100    |   | term passed through each sentiment model,          | of the sentiment analysis results. Also to facilitate    |
|   |                   |   |        |   | plus dummy variables (Section [[dummy-vars]])          | direct comparisons to the combined data set.             |
|   |                   |   |        |   |                                                    |                                                          |
|---+-------------------+---+--------+---+----------------------------------------------------+----------------------------------------------------------|
|   |                   |   |        |   |                                                    |                                                          |
|   |                   |   |        |   | All variables: the summation of traditional_large, | To demonstrate the effect of combining sentiment         |
|   | combined          |   | 142    |   | sentiment_small and sentiment_large,               | analysis results with traditional market data. A large   |
|   |                   |   |        |   | plus dummy variables (Section [[dummy-vars]])          | data set, exploiting the model's variable selection.     |
|   |                   |   |        |   |                                                    |                                                          |
|---+-------------------+---+--------+---+----------------------------------------------------+----------------------------------------------------------|

\captionof{table}[The descriptions of the five base subsets used for comparisons]{The five different subsets created from the financial market and sentiment analysis data. The subset names, total number of variables $\left( \sum \right)$, a summary of the constituents as well as a description of each data set is given. The last column, Reasoning, explains how the subsets were chosen to (1) demonstrate the ability of component-wise boosting, (2) to highlight the impact of social media data on predictive accuracy, and (3) to allow for comparisons to other models.}\label{tab_subsets}
\end{landscape}
\clearpage


**** DONE Lagged subsets <<lagged-subsets>>

After the five different subsets were defined, several variations were made for each of them to include lagged predictor variables. For each of the subsets, four additional subsets were created, including lags of two to five with respect to the outcome variable; the DJIA. Each further degree of lagged variables was appended to the previous lagged subset. Using a fictional data set with a univariate outcome, $y$, and only one predictor, $x$, the resulting five subsets (including the base) may be illustrated as follows:

|                |   |                                                      |
| *Base subset:* |   | $y_t = x_{t-1}$                                      |
|                |   |                                                      |
| *Second lag:*  |   | $y_t = x_{t-1} + x_{t-2}$                            |
|                |   |                                                      |
| *Third lag:*   |   | $y_t = x_{t-1} + x_{t-2} +x_{t-3}$                   |
|                |   |                                                      |
| *Fourth lag:*  |   | $y_t = x_{t-1} + x_{t-2} +x_{t-3} +x_{t-4}$          |
|                |   |                                                      |
| *Fifth lag:*   |   | $y_t = x_{t-1} + x_{t-2} +x_{t-3} +x_{t-4} +x_{t-5}$ |
|                |   |                                                      |


where intercepts and parameter coefficients have been omitted for simplicity. This was performed for each of the five subsets defined in Section [[subsets]], which means a total of 25 sets of data were defined. Each of these subsets was used for each of the parameter configurations within the component-wise boosting modelling phases - for more information, refer to Section [[main-modelling]].


*** DONE Pairwise correlation reduction <<pairwise-corr>>

As was discussed within Chapter [[chapter-gradient-boosting]], the variable selection ability of component-wise gradient boosting does have limits. If two variables are highly correlated and so produce similar approximations to the negative gradient of the loss function, the model will have no way to really distinguish exactly which is the best. In such a case, this would lead to almost random selection between the two variables. In order to minimise the likelihood of this occurring during the modelling, as well as to improve the numerical stability of the gradient descent, a method to remove correlation within the data sets was devised; specifically, pairwise correlation was targeted. 

The method used to purge pairwise correlation from the data set is detailed by Algorithm [[eqref:alg-corr-cutoff]]. The removal of variables was performed iteratively, re-calculating the remaining correlation within the data set after each individual variable was removed. This method presents a more systematic means of removing only those variables, which may impede the overall performance within the boosting procedure, described in Section [[comp-alg]].

\vspace{5mm}

#+Name: alg-corr-cutoff
#+begin_src latex 

  \begin{algorithm}[H]
    \caption{Iteratively removing pairwise correlation within a data set}
    \label{alg-corr-cutoff}

    \BlankLine
    \BlankLine

    \SetKw{Return}{return} %% Custom keyword
    \KwIn{correlation matrix of data set, $\mathcal{C} $; maximum allowed pairwise correlation, $\kappa$ }
    \KwOut{data set with reduced pairwise correlation}
    
    \BlankLine
    \BlankLine
    
    \While{ \hspace{3mm} $\max \mathcal{C} > \kappa $ \hspace{3mm} }{
      \BlankLine
      \begin{enumerate}[leftmargin=12.5mm]
        \BlankLine
      \item [Step 1.] Identify the two variables exhibiting the highest pairwise correlation 
      \item [Step 2.] Compute which has the greatest cumulative pairwise correlation over the entire data set
      \item [Step 3.] Remove this variable from the pair  
      \item [Step 4.] Re-calculate the correlation matrix, having removed one variable
      \end{enumerate}
    }

    \BlankLine
    \Return{data set with $\max \mathcal{C} \leqslant \kappa$}
  \end{algorithm}

#+end_src

\vspace{5mm} 

The maximum level of correlation, $\kappa$, to choose for each model is not something that can be analytically decided upon. Depending on the levels chosen, the number of variables that are removed from a data set can change rather drastically. Figure [[fig:corr-cutoff]] illustrates the number of variables that are removed from both the /traditional_large/ and /combined/ data sets, as a function of the correlation threshold, $\kappa$. The left y-axis shows the number of predictors that are removed for a given $\kappa$, whereas the right y-axis shows that number as a percentage of the total number of predictors in that data set. The error bars highlight how many predictors are removed as $\kappa$ crosses that specific threshold (reading $\kappa$ from low to high). It can be seen that, even choosing a relatively high value for $\kappa$, e.g. $\approx$ 80 %, removes approximately 25 % of predictors for the /traditional_large/ data set, whereas more than 35 % of predictors are removed from the /combined/ data set at the same level of $\kappa$. This shows that the level of correlation within the /combined/ data set is larger than that of the (smaller) /traditional_large/ data set. This might be expected, as the /combined/ data set contains e.g. five values (and so five predictors) of sentiment for each search term, one for each sentiment model - these should be highly correlated by nature.

As is outlined in Section [[param-grid]], a selection of threshold values, $\kappa$, were used for modelling, meaning the effect of correlation within the data is able to be considered when inspecting the collated results. Both of the curves in Figure [[fig:corr-cutoff]] are approximately linear. In the case of the /traditional_large/ data set, one may loosely keep in mind that the value of $\kappa$ roughly equates to the percentage of original predictors that remain in the data set for modelling.

#+attr_latex: :placement \  :width 14cm
#+Caption[The number of predictors removed as a function of the correlation threshold, $\kappa$]: The number of predictors that are removed as a function of the correlation cutoff, $\kappa$. (Top) the /traditional_large/ data set with three lags; (bottom) the /combined/ data set with three lags. The vertical bars placed along the curve reflect how many predictors are removed for the corresponding value of $\kappa$.
#+Name: fig:corr-cutoff
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/corr-cutoff-mixture.png]]


\pagebreak


** DONE Data exploration <<data-exploration>>

Before modelling commenced, the obtained, cleaned and collated data was explored and visualised in order to better understand the structure, and perhaps to gain some insights that may help with making modelling decisions as well as interpreting results. The main outcomes are presented here, allowing the reader to become acquainted with the data set. As the social media data and the sentiment analysis thereof is the novel segment, which this study aims to leverage, the presentation of the data will focus on this area, as well as its relationship to features of the outcome variable: the Dow Jones Industrial Average (DJIA) stock index.


*** DONE Macro view with examples <<macro-view>>

#+attr_latex: :float wrap
#+Caption[Movements of the DJIA compared to Twitter activity]: Individual plots for the DJIA and the tweet counts of three search terms (given in the facet titles), plotted over the entire time, each with a blue trendline. Several key events are highlighted and numbered.
#+Name: fig:tweet-counts-facet
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/tweet-counts-facet.png]]

As was presented in Section [[final-output]], the total number of tweets obtained from Twitter was 2,350,217. Figure [[fig:tweet-counts-facet]] gives a facet view of how the tweets for several of the thirteen search terms are dispersed over the timeline[fn::The tweet data is aggregated to daily sums of tweets - see Section [[data-trans]] for more information.], i.e. \hspace{-12pt} the frequency with which the search terms appeared on Twitter. The blue line on each of the facet plots highlights the trend for that given variable, several points of interest are highlighted with red circles. The DJIA rises for the majority of the timeline, until it plateaus at the end of 2014, with a free-fall drop (labelled "1") at the end of summer 2015. An interesting correspondence is that between the astonishing increase in "oil prices" tweets, just *before* the DJIA takes a short dip and begins to plateau (labelled "2"). Additionally, the number of tweets containing "bear market" begins to rise almost a month before the sharp fall (marked "1").
The two circles peaks (labelled "3" and "4") on the bottom facet more than likely signify reactionary tweets to extraordinary market movements. The first can be traced to 28^th March 2013, where the DJIA closed at a [[http://www.ibtimes.com/sp-500-dow-jones-industrial-average-stock-indexes-close-record-high-markets-recovery-1153105][record high^\dag]]. The circled peak "4" clearly aligns with circle "1", on 24^th August 2015, on which day the DJIA plummeted over 1,000 points on [[http://www.ibtimes.com/dow-jones-industrial-average-plummets-global-stocks-take-black-monday-plunge-great-2065359][negative news^\dag]] regarding China's economy. These signs illustrate that there is a two-way relationship between the movements of the DJIA and the activity on Twitter. Some larger trends seem to be visible through the number of tweets (and likely through the resulting sentiment scores), whereas other features highlight purely the reactive nature of Twitter users to market events. It is the former, which the modelling is aimed at exploiting; the periods of momentum ought to be captured. How this is targeted is discussed further in Section [[param-grid]].


*** DONE Micro view <<micro-view>>

The previous section showed large peaks in the tweet count at potentially important events in the markets timeline; however, here a closer look is taken at the same relationship by inspecting the day-to-day movements of the market versus the activity on Twitter. Figure [[fig:day-to-day]] shows the relationship between the DJIA, log returns thereof and number of tweets computed using tweets containing "Dow Jones". The level of correlation between the log returns and the Twtter data are clear, with moves in Twitter data reflecting, and in the days immediately following 16^th February, preceding those of the market.

#+attr_latex: :width 16cm
#+Caption[DJIA log-returns plotted alongside the logarithm of tweet counts]: Daily movements from 2015 in the DJIA - as well as the log returns thereof - are plotted against the log of sentiment scores for the same period from the "Dow Jones" search term.
#+Name: fig:day-to-day
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/DJIA_returns_tweet_count_three_weeks.png]]

\pagebreak


** DONE Generalised linear models <<main-modelling>>

In this section, both a discussion of model parameters as well as results of the two main generalised linear models (GLMs) are presented, followed by a short comparison. Comparisons between the two GLM models, using component-wise boosting, and several differing models are provided in Section [[results-summary]].


*** DONE Parameter grid <<param-grid>>

Parameters specific to the individual boosting step of the modelling (using the =mboost= package) are the learning rate, $\nu$, and the maximum number of iterations, $m_{max}$. A wide range were tested, resulting in a learning rate of $\nu = 0.05$, coupled with a maximum number of iterations $m_{max} = 2000$, which together sufficed for the algorithm to converge on all data sets. These values were therefore used, consistently, through all modelling variations. Using the bootstrap cross-validation method, outlined in Section [[mstop]], meant that the optimal number of iterations $m_{stop}$ could be determined in each individual case, tailoring the final model used for prediction to each data set[fn::In many cases, these values of $\nu$ and $m_{stop}$ were unnecessarily high. The disadvantage of this being computational cost, whereas the risk that was being circumnavigated was that of non-convergence. The latter is not a problem that cross-validation could have solved.].

Taking a step back from each gradient descent problem, the next level of abstraction for the models in general concerns the /time-series/ nature of the data. It is desirable to make as many predictions as possible, allowing for the predictive accuracy and its errors to be computed accurately. For this reason, a final parameter was defined, namely the /frame-size/, which describes how many days were used to approximate the optimal function $f^*$, using the pre-defined model parameters $\nu$ and $m_{stop}$ - the approximation function was then used to make one single prediction. As an example, using a frame-size equal to 40 means 40 periods of data were taken (40 days from the total 695), the boosting method generated the approximation function, which was subsequently used to predict the outcome variable on the 41^st day.

One further modelling decision had to be made, namely whether the frame-size should be held constant (shifting along the timeline, one period at a time, with each shift making one prediction), or whether the start point be anchored, thereby allowing the number of periods used in finding the approximation function to grow over the timeline. When conducting time-series analysis, there are no hard-and-fast rules governing how many time-periods must be included to guarantee model robustness[fn::As illustrated in the case of ARIMA modelling by [[http://robjhyndman.com/hyndsight/short-time-series/][R. Hyndman^\dag.]]]. It is a question whose answer changes depending on the data being used. There is a trade-off to be found between three main components: the number of periods available, the number of covariates used (i.e. the number of model parameters to be estimated) and lastly the level of noise within the data set.

There are additional factors that must be taken into consideration within the context of financial markets, and those are of trends and cycles - not to be confused with seasonal effects, tackled through time-series decomposition. There are times in which an asset (e.g. a single company stock, a commodity or an entire index) tends to move in one direction, i.e. it exhibits some level of momentum. The event of such a cycle changing may be labelled a /fraction/ or /break/ in the asset's price-path[fn::For work on modelling assets in such a fashion, refer to Mandelbrot's Multifractal Model of Asset Returns (MMAR) cite:mandelbrot1997multifractal cite:calvet1997large cite:fisher1997multifractality.]. The approach taken here to deal with this facet of financial time-series is to make use of our final parameter, frame-size, which would ideally be matched in length to those of the trends and cycles. This is difficult (perhaps impossible) to know ahead of time - and cannot be embedded into the model via the analysis of historic data[fn::It is not possible using the data of this study. One can, however, envisage using older DJIA time-series data to estimate an optimal /frame-size/.] without creating a bias in the predictions, as the information was not available at the time. Taking this into consideration, the choice was made to use a fixed frame-size for each model, shifting it along the timeline with each prediction. However, in order to test for ours model's sensitivity to the chosen frame-size, several values for this parameter were included in the parameter grid, namely 40 and 60 days.

In summary, the final set of parameters that were worked through included pair-combinations for the pairwise correlation threshold, $\kappa$, and the frame-size. For each of these pairs, every single subset (as defined in Section [[subsets]]) was analysed and used to make predictions. The results are summarised in the following sections.   


*** DONE Gaussian family  <<results-gauss>>

The Gaussian family utilises the $L_2$ loss function (as depicted in Section [[naive-boosting]] by eqref:eqn-gauss-loss and eqref:eqn-gauss-emp-risk). Additional to several standard error measurements, we define a measurement, we shall call /predictive accuracy/, which is a simple test that produces a binary response, indicating whether the /direction/ of movement was predicted correctly or not - the numerical discrepancy between the true and predicted values are not taken into consideration for this measure. In Figure [[fig:glm-pred-acc]], the column /Predictive acc./ reports the percentage of correct predictions measured by the sign accuracy, over the ($695 -$ /frame-size/) predictions that were made for each model.
Looking at the upper row of facet plots, with the frame-size fixed at 40 days, the /combined/ subset generally has the best performance, consistently appearing at the higher end of the predictive accuracy spectrum. The condensed /sentiment_small/ subset performed particularly well in cases with a lag of 1. As did the /traditional_small/ subset; however, that subset's performance decreased rather drastically with the increase of lag value, for all levels of $\kappa$.
With frame-size set to 60 in the lower row of plots, it is the /sentiment_large/ subset that dominates the group, producing some of the highest predictive accuracies, approaching 57 %. The /combined/ subset performs similarly for lag values $\geqslant 2$. 

#+attr_latex: :width 16cm
#+Caption[The predictive accuracy of all subsets, using Gaussian regression in GLMs]: For each of the parameter-pairs, correlation cutoff $\kappa$ and frame-size (upper row 40 days, lower row 60 days), the average predictive accuracy is plotted for each subset, for each of its five lagged variants.
#+Name: fig:glm-pred-acc
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/glm_best_preds.png]]

In Figure [[fig:glm-errors]], the mean-squared error (MSE) is given for each of the predictive accuracies presented in Figure [[fig:glm-pred-acc]]. Each MSE value (just as with the predictive accuracy values) is the average value over the ($695 -$ /frame-size/) predictions that were made for each subset. Comparing the upper and lower rows of plots, the errors are further spread out from one another within the upper row, with frame-size 40. In the facets where $\kappa$ = 70 % and 80 % (the two left-most columns), the errors of the /combined/ subset are at least as good as for all other subsets, with low dispersion between lags and low absolute values - they are very comparable to those of the $traditional_small$ subset. However, comparing the predictive accuracy of the two subsets in Figure [[fig:glm-pred-acc]], it can be seen that the /combined/ subset outperforms the /traditional_small/ subset in all but the first lag. In the plots where $\kappa$ = 90 % and no correlation reduction was used (the two columns furthest to the right), there is a clear increase in error for both the /sentiment_large/ and /combined/ data sets. This is likely due to them containing a large number of predictors, which compounds as higher orders of lag are utilised (see Section [[subsets]] for the number of predictors each subset contains). It appears to be in the first lag, where the two subsets are penalised most heavily for their size, relative to the other subsets. 

The errors of the /sentiment_small/ subset in the upper row, with a lag of 3, are noticeably larger than all others. A reason for the relatively high error value is unknown; however, the /consistency/ of the error (all values seemingly identical) may be explained by the fact that very few predictors are removed from this subset during the correlation reduction step described in Section [[pairwise-corr]] - not unexpected, given the small number of predictors it begins with.

#+attr_latex: :width 16cm
#+Caption[The mean-suared error of all subsets, using Gaussian regression in GLMs]: The mean-squared error for each of the results presented in Figure [[fig:glm-pred-acc]]. Facets separate the frame-size and the correlation threshold $\kappa$ (upper row: 40 days, lower row: 60 days). The errors for each lag value of each subset are grouped onto one vertical line.
#+Name: fig:glm-errors
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/glm_MSE_errors.png]]


*** DONE Binomial family  <<results-bin>>

Each of the models that were presented in the previous section were also completed using the binomial family within the =mboost= package. Using this family meant that the outcome variable automatically produced a binary response, $\{0, 1\}$, which corresponded to the model predicting whether the market moves upwards or downwards on the following day. This is somewhat of a simplification in comparison to the models using the Gaussian family, as the question of magnitude is no longer a concern. The goal, therefore, was to increase the defined metric on performance, i.e. the predictive accuracy, by slightly reducing the requirements of the model. When predicting a binomial response, the ways in which error can be recorded are naturally confined. Numerical residuals cannot be measured for each prediction, as in the previous section. The two methods will, therefore, later be compared solely via their predictive accuracies.

As was done for the Gaussian family results, all parameter combinations for the binomial family are presented in Figure [[fig:bin-pred-acc]]. Inspecting the upper row, which corresponds to a frame size of 40 days, it is clear that the /combined/ data set returns the greatest predictive accuracy for the majority of parameters combinations. The performance levels of the two /small/ data sets are equally low, barely breaching 51.5 % predictive accuracy between them. The /traditional_large/ data set performs overall best in case where the lag was equal to five.

The lower row tells a more convincing story, with clear separation between the data sets that include sentiment analysis results and those that don't. The /combined/ and /sentiment_large/ subsets are clear victors across all values of $\kappa$ and lag; the /sentiment_small/ data  as performing markedly better than the two /traditional/ data sets. The /combined/ data set shows the highest predictive ability overall, with the /sentiment_large/ data set performing equally well when a larger frame-size was used. 

The models using a frame size of 60 days consistently outperform those using 40 days, with a relatively large improvement in predictive accuracy for almost every subset. The maximum predictive accuracy achieved in the latter equals that of the the worst in the former (\approx 53 %). These results validate the relationship pointed out in Section [[macro-view]], namely that long-term market momentum having ties with activity in social media. The inclusion of social media data, in this case, unquestionably improved the performance of the model.

#+attr_latex: :width 16cm
#+Caption[The predictive accuracy of all subsets, using binomial regression in GLMs]: The predictive accuracies are plotted for the binomial model, separated by the frame-size and correlation threshold, $\kappa$ (upper row: 40 days, lower row: 60 days).
#+Name: fig:bin-pred-acc
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/bin_best_preds.png]]

The top 50 results over all subsets and parameters combinations are given in Table [[tab:top-bin-results]], ordered according to predictive accuracy. The first /traditional/ subset appears at position 49. One thing that is highlighted by the results in that table is that the frame-size value of 60 dominates the results. This indicates that cycles of momentum in the DJIA (discussed briefly in Section [[param-grid]]) appear to be best captured over a phase of 60 days[fn::In the same table for the Gaussian results, the 60 day frame-size also dominates. The highest position a /traditional/ subset reached was 15^th; a total of 12 /traditional/ subsets appeared in the top 50.]. There is less consistency in the further parameters, $\kappa$ and lag. There is a general tendency for lower values of lag (1 to 3) to perform better.

#+attr_latex: :placement \
#+Caption[The top 50 binomial models, ranked by descending predictive accuracy]: The top 50 predictive accuracies from the binomial models. The results are dominated by subsets containing sentiment analysis data. The best performing traditional model appears at position 49.
#+Name: tab:top-bin-results
| *Rank* | *Frame-size* |   | $\kappa$ *(%)* |   | *Lag* |   | *Subset*          |   | *Pred. accuracy (%)* |
|        |              |   |                |   |       |   |                   |   |                      |
|--------+--------------+---+----------------+---+-------+---+-------------------+---+----------------------|
| <c>    | <c>          |   | <c>            |   | <c>   |   |                   |   | <c>                  |
|        |              |   |                |   |       |   |                   |   |                      |
| 1      | 60           |   | 70             |   | 2     |   | sentiment_large   |   | 57.26                |
| 2      | 60           |   | 90             |   | 5     |   | sentiment_large   |   | 57.21                |
| 3      | 60           |   | 90             |   | 3     |   | combined          |   | 57.03                |
| 4      | 60           |   | 70             |   | 1     |   | combined          |   | 57.01                |
| 5      | 60           |   | 80             |   | 1     |   | combined          |   | 57.01                |
| 6      | 60           |   | 80             |   | 2     |   | sentiment_large   |   | 56.94                |
| 7      | 60           |   | 90             |   | 1     |   | combined          |   | 56.85                |
| 8      | 60           |   | 70             |   | 3     |   | combined          |   | 56.71                |
| 9      | 60           |   | 80             |   | 2     |   | combined          |   | 56.62                |
| 10     | 60           |   | 80             |   | 3     |   | sentiment_large   |   | 56.56                |
| 11     | 60           |   | 90             |   | 3     |   | sentiment_large   |   | 56.56                |
| 12     | 60           |   | none           |   | 3     |   | combined          |   | 56.56                |
| 13     | 60           |   | 80             |   | 4     |   | combined          |   | 56.49                |
| 14     | 60           |   | 90             |   | 2     |   | sentiment_large   |   | 56.47                |
| 15     | 60           |   | none           |   | 2     |   | sentiment_large   |   | 56.47                |
| 16     | 60           |   | none           |   | 3     |   | sentiment_large   |   | 56.40                |
| 17     | 60           |   | 80             |   | 1     |   | sentiment_large   |   | 56.38                |
| 18     | 60           |   | 80             |   | 3     |   | combined          |   | 56.24                |
| 19     | 60           |   | 70             |   | 1     |   | sentiment_large   |   | 56.22                |
| 20     | 60           |   | none           |   | 2     |   | combined          |   | 56.15                |
| 21     | 60           |   | 70             |   | 5     |   | combined          |   | 56.10                |
| 22     | 60           |   | 70             |   | 3     |   | sentiment_large   |   | 56.08                |
| 23     | 60           |   | 90             |   | 4     |   | combined          |   | 56.01                |
| 24     | 60           |   | none           |   | 4     |   | combined          |   | 56.01                |
| 25     | 60           |   | none           |   | 5     |   | sentiment_large   |   | 55.94                |
| 26     | 60           |   | 80             |   | 4     |   | sentiment_large   |   | 55.85                |
| 27     | 60           |   | 70             |   | 2     |   | combined          |   | 55.84                |
| 28     | 60           |   | none           |   | 5     |   | combined          |   | 55.78                |
| 29     | 60           |   | 80             |   | 1     |   | sentiment_small   |   | 55.75                |
| 30     | 60           |   | 90             |   | 1     |   | sentiment_small   |   | 55.75                |
| 31     | 60           |   | 90             |   | 1     |   | sentiment_large   |   | 55.75                |
| 32     | 60           |   | none           |   | 1     |   | sentiment_small   |   | 55.75                |
| 33     | 60           |   | none           |   | 1     |   | sentiment_large   |   | 55.75                |
| 34     | 60           |   | none           |   | 1     |   | combined          |   | 55.75                |
| 35     | 60           |   | 90             |   | 4     |   | sentiment_large   |   | 55.70                |
| 36     | 60           |   | none           |   | 4     |   | sentiment_large   |   | 55.70                |
| 37     | 40           |   | 80             |   | 3     |   | sentiment_small   |   | 55.65                |
| 38     | 40           |   | 90             |   | 3     |   | sentiment_small   |   | 55.65                |
| 39     | 40           |   | none           |   | 3     |   | sentiment_small   |   | 55.65                |
| 40     | 60           |   | 70             |   | 5     |   | sentiment_large   |   | 55.63                |
| 41     | 60           |   | 80             |   | 5     |   | sentiment_large   |   | 55.63                |
| 42     | 60           |   | 90             |   | 5     |   | combined          |   | 55.63                |
| 43     | 60           |   | 70             |   | 4     |   | combined          |   | 55.54                |
| 44     | 60           |   | 90             |   | 2     |   | combined          |   | 55.52                |
| 45     | 60           |   | 80             |   | 5     |   | combined          |   | 55.47                |
| 46     | 60           |   | 70             |   | 1     |   | sentiment_small   |   | 55.43                |
| 47     | 40           |   | 70             |   | 3     |   | sentiment_small   |   | 55.31                |
| 48     | 40           |   | 90             |   | 1     |   | sentiment_large   |   | 55.29                |
| 49     | 60           |   | 70             |   | 1     |   | traditional_large |   | 55.28                |
| 50     | 40           |   | 80             |   | 4     |   | sentiment_small   |   | 55.24                |

\pagebreak


*** DONE Family comparisons

Inspecting first the predictive accuracy results in Figures [[fig:glm-pred-acc]] and [[fig:bin-pred-acc]], as well as the detailed results found in Table [[tab:top-bin-results]] for the binomial results, we see that the best performers are unequivocally those containing social media and sentiment analysis data. The magnitude of the predictive accuracies are very similar between the Gaussian and binomial sets of results, ranging from 50 % to 53 % for frame sizes of 40, and from 53 % to just over 57 % in the case of a 60 day frame-size. The clear distinguishing feature between the two families is the separation of performance between models containing social media data and those that didn't, that the binomial family was able to accentuate. Other than this difference, the two models are not easy to distinguish between in terms of their performance. Due to the binomial model not returning MSE values, it is not possible to compare the errors of the two models.

Almost each model outperformed a naive (random selection) model giving 50% predictive accuracy. Only in the cases of the small data sets; /traditional_small/ and /sentiment_small/ in lag values four and five, with a frame size of 40 days, were any results worse than 50 % found.


*** DONE Prediction-generated price paths <<price-paths>>

Figure [[fig:price-paths]] visualises the results in direct comparison to the DJIA itself, by plotting its price-path over the entire timeline against those price-paths that were predicted (on a day-by-day basis) by several different models. In order to have measurable magnitudes of price movement, the results from the Gaussian GLM models are used. The prices follow from a nominal base-value of 100. We take the /combined/ data set that performed the best over all parameters configurations, namely for: frame-size $= 60$, $\kappa$ = 80 % , with a lag of 3. In comparison, we take the /traditional_large/ data set (thereby containing all the same financial market data, but without the social media data) for the same parameter combinations, plus a third data set, which is the best performing /traditional/ subset. That used the parameters frame-size $= 60$, $\kappa$ = 70 %, with a lag of 1.

#+attr_latex: :width 16cm
#+Caption[Four price-paths, comparing forecasted returns against actual returns]: Four price-paths are plotted over the entire timeline: the DJIA plus those of the three best performing /combined/ and /traditional/ data sets, as described in Section [[price-paths]].
#+Name: fig:price-paths
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/price_paths.png]]

All three of the predicted returns manage to map to the movements of the market fairly well - following similar patterns of peaks and troughs. It is the /combined/ data set that most closely resembles the price-path of the the DJIA, more intimately tracking movements and reacting more sharply to large jumps the DJIA made. For example, all three subsets move as expected on the news of the huge drop on 24^th August 2015 (discussed in Section [[macro-view]]); however, it is the /combined/ data set, including social media data, which falls earliest and most rapidly, thereby most closely reflecting the DJIA. All three of the subsets produce paths that somewhat resemble a moving average of the DJIA itself, all with an upward bias and without the high levels of granularity exhibited by the DJIA.


*** DONE Increasing frame-size

Throughout the modelling presented thus far, the frame-size used to train an approximation function was fixed at either 40 or 60 days. The reasons for which are discussed in Section [[param-grid]]. Here we present a set of predictive accuracy results that were created - for the Gaussian and binomial models - using an /increasing/ frame-size. An initial frame-site of 60 days was used; however, instead of shifting the frame along one day into the future to train a new approximation function and, from that, make one more prediction, the frame-size was increased by one day and *not shifted* - keeping the start of the frame-size anchored at day 1 in the timeline. This means that, for each prediction, the maximum amount of information available within the data set was used, i.e. all days in the timeline up until the day before the prediction. This is to test the assumption that the frame-size corresponds to general trends and phases within the price development of the DJIA. The approach presented here has the advantage that the maximum possible amount of information is used for every prediction (in terms of the timeline), but has perhaps a disadvantage in that it does not necessarily capture the prevailing momentum of the market at the time of the prediction.

In addition to an (initial) frame-size of 60 days being used (as with all other comparisons made to the results from Section [[main-modelling]]), a correlation threshold of $\kappa$ = 80 % was used. All other model parameters, such as shrinkage, $\nu = 0.05$, and maximum number of boosting iterations, $m_{max} = 2000$, were kept identical to those used in Section [[main-modelling]], for both the Gaussian and binomial models. Figure [[fig:growing-frame]] presents the predictive accuracies of the two comparisons, with the left column displaying the results of the binomial model and the right column those of the Gaussian model. In both columns, the upper row gives the results obtained earlier from a fixed frame-size of 60 days, whilst the lower row gives those for an increasing frame-size. 

\vspace{3mm}

#+attr_latex: :width 16cm
#+Caption[The predictive accuracies of GLMs using fixed versus increasing frame-size]: A comparison of predictive accuracies between models with fixed frame-size and increasing frame-size. In both cases, results using binomial (left) and Gaussian (right) modelling are plotted. Each facet contains the results for all lagged variants of all five subsets. 
#+Name: fig:growing-frame
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/growing_plain_frame.png]]

Inspecting first the binomial results, it is evident that the use of an increasing frame-size significantly diminishes the performance of the model. All predictive accuracies are compressed to below 54 %, with the /traditional/ subsets still showing weaker performance than those subsets containing social media data. While still performing worse than in the case of a fixed frame-size, the /sentiment_small/ subset did manage to surpass the other subsets in all but the first lagged variant, when using the increasing frame-size. This may be due to more information being provided (due to a higher average number of periods used for each prediction), while still being compactly included in fewer covariates than in the other models.

In the case of the Gaussian models, the performance is very similar between the models using fixed frame-size and those with increasing frame-size. The predictive accuracy of the /combined/ data set increases in the first lag, from 55.5 % with fixed frame-size to 56.5 % with increasing frame-size. It is indistinguishable in the second lag (\approx 56 %), while the performance is reduced for lags three, four and five. It is perhaps juxtapositional to state that the high number of variables, coupled with ever increasing numbers of observations overwhelms the boosting algorithm because, contradictorily, the performance of the /sentiment_large/ data set actually improves along the same dimension of comparison - it shows higher performance in lags three and five for the increasing frame-size method than that of fixed frame-size. The /sentiment_small/ data set performs consistently worse using an increasing frame-size that fixed, which may reflect the model losing its ability to explain market momentum when presented with longer time-frames, using only its succinct collection of predictors. Sentiment seems only to aid with prediction in the shorter term. This can also be seen when looking at the simulated price-paths illustrated in Section [[price-paths]], where the /combined/ data set was better attuned to market movements than its /traditional_large/ counterpart in the short-term.

Comparing the binomial and Gaussian models, it seems the Gaussian regression methods was better able to cope with the higher influx of data at each iteration, whereas the binomial model was more greatly, negatively, affected.



** DONE Stochastic gradient boosting <<stochastic-boosting>>


*** DONE Parameter tuning

This section presents results obtained from stochastic gradient boosting, which was performed for a binary response variable, i.e. whether the market rose or fell. This makes for good comparison to the results presented in Section [[results-bin]], however the methodology does differ in more than one way. A detailed discussion on stochastic gradient boosting may be found in Section [[stochastic-boosting]]. It must be made very clear that the algorithm used here is *not* component-wise gradient boosting, but rather the /batch/ gradient boosting, outlined in Section [[naive-boosting]]. As this stochastic methodology is quite different, the aim here is merely to achieve the best /predictive accuracy/ possible using the stochastic approach. Results are then be compared to those presented in Section [[results-bin]] via this metric, which is validated by the choice of input data (see below). Using the /batch/ gradient descent method does raise concerns about performance in the face of wide data sets, as there is no in-built variable selection. We aim to test the abilities the method has through its added factor of random predictor selection, which essentially replaces that of the more systematic and statistically tuneable way of sequential variable selection, carried out in component-wise gradient boosting. The added randomisation does not compensate directly for this difference, however it is designed (adapted to utilise properties of random forests) to have the ability of variance reduction within a model (see section [[stochastic-boosting]]).

In order to compare the performance of a stochastic implementation of gradient boosting as fairly as possible with that of the GLM models using component-wise boosting, an identical subset of this study's data set was used. Namely that with a correlation threshold, $\kappa$ = 80 %, with lag values one through five. The methodology followed here does mean that the /frame-size/ parameter is lost. This is because, instead of using a rolling-window approach, train a test sets were created instead of sequentially fitting a model and making a prediction at one-period intervals along the timeline[fn::This was also because the limitations of the R package =gbm=, which did not to be function when using the narrower of the data sets, e.g. /traditional_small/ and /sentiment_small/.]. The 25 data sets - the five lags of each of the five subsets - were each divided into 65 % training data and 35 % test data, using stratified sampling. If it is assumed that the market rose and fell with a ratio of e.g. 8:10 over all periods, then /stratified/ sampling simply signifies that the training and test sets created also contain this ratio of days, on which the market rose and fell. A model was then trained on the training set (of 452 days) and the test set (243 days) was used to make predictions. The predictive accuracy was then defined as the percentage of days on which the movement of the market was correctly predicted, out of the 243 predictions made.

Using this method introduces several new paramters to the model, the most interesting of which being the fraction of predictors[fn::In his original paper cite:friedman2002stochastic, Friedman used $\pi$ to symbolise a random permutation of the data, from which the fraction was taken. We use $\pi$ simply to symbolise the fraction, or sub-sample, of of predictors used to fit the base learner in a given step.] that are randomly selected at each iteration of the gradient descent process, $\pi$. This paramter generally leads to a slower descent of the loss function, meaning a larger number of iterations are required. Furthemore, it allows several other /new/ hyperparamters to be tuned. To optimise for these, a new parameter tuning grid was first defined to test over a wide range of combinations[fn::As was mentioned, the frame-size no longer plays a role, and the value of $\kappa$ remained fixed at 80 %.]. The metric used to tune the paramters was the area under the [[https://en.wikipedia.org/wiki/Receiver_operating_characteristic][receiver operator characteristic^\dag]] (AUROC) cite:bradley1997use. This tuning was performed individually for each of the data sets, as their differences in size may have been better suited to different variations to the model parameter space. Table [[tab:tuning-grid]] shows the values that were tested for, as well the the values for each parameter that were given as optimal in the case of the /combined/ data set with lag value of 5 - the largest data set. The optimal random selection fraction, $\pi$, was found to be 0.5, which coincides with the range suggestion made by Friedman cite:friedmanstochastic. The maxmimum number of boosting iterations, $m_{max}$ was given to be 3000, which is 50 % more than was found to be a reasonable maximum for the component-wise boosting. Again, the number of iterations required to reached the loss-function's minimum is expected to increase, as the introduction of a stochastic process perturbs the path of steepest descent - the added benefit (as discussed in Section [[stochastic-boosting]]) being that variance in results is likely reduced. An optimal learning rate of $\nu = 0.01$ further reflects that the algorithm is required to be a slow learner with the involvement of a stochastic process.

\vspace{5mm}

#+Caption[The tuning grid optimised over for stochastic gradient boosting]: The tuning grid used to find optimal parameters for the stochastic gradient boosting algorithm, for binary response modelling.
#+Name: tab:tuning-grid
| *Parameter* |   | *Value range*                 |   | *Desctiption*                   |   | *Optimum* |
|             |   |                               |   |                                 |   |           |
|-------------+---+-------------------------------+---+---------------------------------+---+-----------|
| <c>         |   |                               |   |                                 |   |   <c>     |
|             |   |                               |   |                                 |   |           |
| $\pi$       |   | 0.3, 0.5, 0.7                 |   | The fraction of parameters      |   |       0.5 |
|             |   |                               |   | selected at each iteration      |   |           |
|             |   |                               |   |                                 |   |           |
| $m_{max}$   |   | 100 - 5000 (intervals of 500) |   | The number of iterations        |   |      3000 |
|             |   |                               |   |                                 |   |           |
| $\nu$       |   | 0.01, 0.05, 0.1               |   | The learning rate, or shrinkage |   |      0.01 |
|             |   |                               |   |                                 |   |           |


*** DONE Comparison to component-wise boosting

The results of the stochastic gradient boosting are compared to those of the GLM model using component-wise boosting, originally presented in Section [[results-bin]]. As was mentioned there, the two methods are similar, but not the same. Therefore, any comparisons deeper than that of the pure outcome, the /predictive accuracy/, are not possible within the scope of this limited superficial differentiation of their nuances.

#+attr_latex: :width 16cm
#+Caption[The predictive accuracies of /component-wise/ versus /batch/ stochastic gradient boosting]: Predictive accuracies for component-wise boosting (left) are plotted alongside those using stochastic gradient boosting (right). Both results stem from identical input data sets, with pairwise correlation threshold, $\kappa$ = 80 %.
#+Name: fig:stoch-pred-acc
[[/Volumes/Mac OS Drive/Thesis/Source Code/Reporting/nwm_Report/images/stoch_boost.png]]

It can be seen from Figure [[fig:stoch-pred-acc]] that the results obtained from the stochastic boosting are not as strong as those from component-wise boosting, with several models failing to beat even a naive model with predictive accuracy of 50%, with the performance of the /traditional_large/ subset dropping below 47.5 % in one case (in lag 1). Furthermore, the stochastic boosting results do not show any signs of reduced variance[fn::The reduction in variance through the addition of a stochastic process is usually detectable through lower errors (and variance thereof) on predictions; however, these are not available here, having performed logistic regression.], when compared to the component-wise boosting results. The relatively large spread in performance within the stochastic boosting results is clear to see, with almost 10 % difference between the best (/sentiment_small/ in lag 2) and worst (/traditional_large/ in lag 1) performers, which is larger than any other set of boosting results found in this study.

The ability of stochastic boosting to deal with the larger data sets seems to also be inferior to that of component-wise boosting. This is illustrated by the superior performance of the smaller data sets, with both the /sentiment_small/ and the /traditional_small/ subsets outperforming their /large/ equivalents in four out of five lag variants. The largest subset: /combined/, performs unexpectedly poorly, given its comparatively high levels of predictive accuracy in all parameter combinations used in component-wise boosting, depicted in Sections [[results-gauss]] and [[results-bin]].

