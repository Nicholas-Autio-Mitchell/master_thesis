lsos()
lsos()
names(sent_scaled)
names(sent_scaled)
names(tweets_actions)
lsos()
lsos()
names(daily_avg_scores)
names(macro)
sort(names(macro))
names(macro_indices)
names(macro_indices)
names(macro_other)
names(macro)
names(macro)
macro[1]
macro[,1]
macro[,1, with=FALSE]
names(macro)
dim(macro)
lsos()
lsos()
names(tweets_actions)
names(tweets_actions)
?gsub
x <- copy(tweets_actions)
names(x$Dow_Jones.total_actions) <- "dow_jones.total_actions"
names(x)
x$Dow_Jones.total_actions
summary(x)
names(x)
names(tweets_actions)
names(tweets_actions)
names(tweets_actions)
names(tweets_actions)
rm(new_names)
lsos()
rm(x)
names(daily_avg_scores)
names(daily_avg_scores)
names(daily_avg_scores)
dim(daily_avg_scores)
dim(tweets_actions)
load("/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Modelling/raw_data/date_columns_complete.rda")

lsos()
date_columns
ls.str(indice_final)
str(indice_final)
indice_final
setdiff(indice_final$Date, date_columns$dates)
setdiff(date_columns$dates, indice_final$Date)
setdiff(date_columns$dates[is.weekend == 0], indice_final$Date)
setdiff(date_columns[is.weekend == 0][, 1, with=FALSE], indice_final$Date)
c <- date_columns[is.weekend == 0][, 1, with=FALSE]
c
setdiff(c, indice_final$Date)
setdiff(indice_final$Date, c)
indice_final
class(indice_final$Date)
class(date_columns$dates)
date_columns$dates
as.data.table(date_columns$dates)
c <- date_columns[is.weekend == 0][, 1, with=FALSE]
c
names(c) <- "Date"
c
d <- as.data.table(indice_final$Date)
d
names(d) <- "Date"
c
d
identical(c, d)
setdiff(c, d)
setdiff(d, c)
c <- date_columns[is.weekend == 0][, 1, with=FALSE]
str(c)
str(d)
create the subsets and the lags in 'base_data_creator.R'
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>  gold <- getSymbols("GCG16.CMX", auto.assign = FALSE)
create the subsets and the lags in 'base_data_creator.R'
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>  
gold <- getSymbols("GCG16.CMX", auto.assign = FALSE)
as.data.table(new_gold)
as.data.table(gold)
gold
as.data.table(gold)
new_gold
as.data.table(new_gold)
gold <- as.data.table(gold)
gold
lsos()
lsos(n=200)
lsos()
new_macro_names
names(indice_final)
macro_final
ncol(macro_final)
x
x
lsos(n=200)
macro_final
identical(macro_final$Date, indice_final$Date)
lsos()
rm(x)
lsos()
names(sent_scaled)
lsos()
tweets_actions
summary(tweets_actions)
str(tweets_actions)
str(date_columns)
str(sent_scaled)
lsos()
daily_avg_scores
sent_avg
lsos()
names(sent_scaled_to_merge)
names(sent_scaled_to_merge)
names(sent_avg_to_merge)
names(sent_scaled_to_merge)
names(tweets_actions_to_merge)
str(sent_to_merge)
ls.str(sent_to_merge)
names(sent_to_merge)
sent_to_merge
str(sent_to_merge)
summary(sent_to_merge)
sent_avg
sent_to_merge$sent_avg_to_merge
names(sent_tmp)
dim(sent_tmp)
sum(is.na(sent_tmp))
str(sent_final_complete)
names(sent_final_complete)
dim(sent_data)
sum(is.na(sent_data))
lsos()
rm(sent_tmp)
rm(sent_data)
lsos()
names(macro_final)
names(indice_final)
lsos(n=200)
lsos()
names(sent_final)
names(indice_final)
names(macro_final)
dim(all_macro)
names(macro_all)
dim(macro_all)
dim(indice_final)
dim(sent_final)
dim(macro_final)
dim(all_data_final)
names(all_data_final)
sum(is.na(all_data_final))
lsos()
names(all_data_final)
lsos()
rm(list = ls())
names(all_data_final)
trad_small
names(all_data_final)
class(trad_small)
dim(trad_small)
class(trad_small)
dim(trad_small)
trad_small
dim(trad_large)
class(trad_large)
names(trad_large)
all_data_final[, .(day.number), with=FALSE]
all_data_final[, day.number, with=FALSE]
all_data_final$day.number
all_data_final[, day.number]
all_data_final[, .(day.number)]
names(all_data_final)
names(trad_large)
names(trad_large)
dim(trad_large)
rm(list=ls())
lsos()
identical(base_subsets$trad_small, trad_small)
summary(base_subsets)
library(gganimate)
library(animation)
?gg_animate
     gg_animate(p2, pause = .1, title_frame = FALSE)
     gg_animate(p2, pause = .01, title_frame = FALSE)
DOW_unshifted
names(base_subsets$trad_large)
names(base_subsets$sent_small)
names(base_subsets$sent_large)
names(base_subsets$combined)
base_subsets$trad_small
base_subsets$trad_small$DOW == base_subsets$trad_large$DOW == base_subsets$sent_small$DOW == base_subsets$sent_large$DOW == base_subsets$combined$DOW
base_subsets$trad_small$DOW == base_subsets$trad_large$DOW
 == base_subsets$sent_small$DOW == base_subsets$sent_large$DOW
base_subsets$sent_small$DOW == base_subsets$sent_large$DOW
base_subsets$sent_large$DOW == base_subsets$combined$DOW
names(base_subsets$trad_small)
DOW_unshifted
DOW_unshifted
dummy_unshifted
str(dummy_unshifted)
str(dummy_unshifted)
new_row
new_row
str(new_row)
new_row
?setcolorder
names(base_subsets_shifted$trad_small)
names(base_subsets_shifted$trad_small)
base_subsets_shifted$trad_small
names(base_subsets_shifted$trad_large)
x
dow_day
to_shift
dow_day
class(dow_day)
class(to_shift)
x
x
shifted
x
x
input_subset <- base_subsets$trad_large
to_shift
new_row
shifted
input_subset
names(base_subsets$combined)
dim(shifted)
shifted
str(shifted)
shifted[, .(DOW.DP, day.number, is.monday, is.holiday)]
str(shifted[, .(DOW.DP, day.number, is.monday, is.holiday)])
output_subset
output_subset
rm(list=ls())
base_subsets$trad_small
shifted
x
base_subsets_shifted$trad_small
input_subset <- base_subsets$trad_small
input_subset
input_subset <- base_subsets$trad_small
input_subset
input_subset <- base_subsets$sent_small
input_subset
to_shift
to_shift
new_data
base_subsets$sent_small
input_subset <- copy(base_subsets$sent_small)
new_data
shifted
input_subset
rm(list=ls())
shifted
x
str(base_subsets_shifted$trad_large)
input_subset <- copy(base_subsets_shifted$trad_large)
input_subset
input_subset <- copy(base_subsets$trad_large)
input_subset
output_subset
output_subset
str(output_subset)
str(base_subsets_shifted)
str(base_subsets_shifted)
DOW_unshifted
dummy_unshifted
names(base_subsets_shifted$combined)
names(base_subsets_shifted$trad_small)
sub_ts
sub_tl
sub_ss
subsets_lagged
names(x)
names(y)
identical(x, y)
x
x
x
x
base_subsets_shifted$trad_large
base_subsets_shifted$trad_small
tester <- cbind(base_subsets_shifted$trad_small[, c(1, 2, 3), with = FALSE], x[, c(1:5), with =FALSE])
tester
str(ts_L5, list.len = 25)
names(ts_L5)
names(sub_ts)
dim(sub_ts)
dim(ts_L5)
str(ts_L5, list.len = 30)
ts_L5
ts_L5
ts_L5
DOW.DP
DOW.DP
main_dates
ts_lagged
tester
ts_L5
ts_L1
ts_L2
ts_L3
ts_L4
ts_L5
dim(x)
ts_L5
ts_L5
names(ts_L5)
subsets_lagged$Lag.5$trad_small
tl_L5
tester
tl_L1
names(tl_L4)
dummy_unshifted
new_row
input_subset <- base_subsets$combined
input_subset <- base_subsets$sent_small
input_subset
names(subsets_lagged$Lag.3$sent_small)
names(subsets_lagged$Lag.3$trad_small)
names(subsets_lagged$Lag.3$trad_large)
tl_L3
names(x1)
names(x1)
tester
tester
tl_L5[, c(1:10), with = FALSE]
DOW_dummy.L0
load("/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Modelling/2_glmboost/sequential_test/glm_results_lag_2_sent_large.rda")
lsos()
glm_seq <- copy(glm_results_Lag.4)
load("/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Modelling/2_glmboost/parallel_test_2000/glm_results_lag_2_sent_large.rda")
lsos()
glm_par2 <- copy(glm_results_Lag.4)
lsos()
load("/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Modelling/2_glmboost/parallel_test_1000/glm_results.L2.sent_large.rda")
lsos()
glm_par1 <- copy(glm_results_Lag.4)
rm(glm_results_Lag.4)
lsos()
identical(glm_seq, glm_par1)
glm_par1$results$cv_1$errors$sign_accuracy
glm_par1$results$cv_1$errors$sign_accuracy
for(i in 1:12){print(glm_par1$results[[i]]$errors)}
for(i in 1:12){print(glm_par1$results[[i]]$errors$sign_accuracy)}
7/12
for(i in 1:12){print(glm_par2$results[[i]]$errors$sign_accuracy)}
11/28
_seq <- load("/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Modelling/2_glmboost/parallel_test_1000/glm_results.L5.combined.rda")
_seq <- load("/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Modelling/2_glmboost/parallel_test_1000/glm_results.L5.combined.rda")
.seq <- load("/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Modelling/2_glmboost/parallel_test_1000/glm_results.L5.combined.rda")
lsos()
i
glm.par  <- copy(glm_results_Lag.5)
load("/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Modelling/2_glmboost/sequential_test/glm_results_lag_5_combined.rda")
lsos()
glm.seq  <- copy(glm_results_Lag.5)
identical(glm.par, glm.seq)
for(i in 1:12){print(glm.par$results[[i]]$errors$sign_accuracy)}
for(i in 1:12){print(glm.seq$results[[i]]$errors$sign_accuracy)}
8/12
12.5/28
1.5/17
lsos()
identical(glm_par1, glm_par2)
for(i in 1:12){print(glm_par1$results[[i]]$errors$sign_accuracy)}
for(i in 1:12){print(glm_par2$results[[i]]$errors$sign_accuracy)}
names(glm_par2$results)
names(glm_par2$results$cv_1)
names(glm_par2$results$cv_1$mstop)
glm_par2$results$cv_1$mstop
for(i in 1:12){print(glm_par2$results[[i]]$mstop)}
for(i in 1:12){print(glm_par1$results[[i]]$mstop)}
?flatTable
lsos()
summary(x)
length(x)
str(x$Lag.1.sent_small)
str(x$Lag.3.sent_small)
lsos()
rm(list=ls())
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/B_cutoff90_frame60/glm_results.Lag.2.trad_large.rda")
lsos()
str(glm_results.Lag.2.trad_large, list.len = 10)
x <- results_preprocessor(results_object = glm_results.Lag.2.trad_large)
x
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff70_frame40/results/glm_results.L5.combined.rda")
lsos()
x1 <- results_preprocessor(glm_results.L5.combined)
x1
lsos()
load("/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Modelling/3_binomial_absolute/subsets_lagged.rda")
lsos()
traditional_model.lag3 <- copy(subsets_lagged$Lag.3$trad_large)
save(traditional_model.lag3, file = "/Volumes/Mac\ OS\ Drive/Thesis/Source\ Code/R/Sent_Received/Niko\ -\ sent\ to/low_mstop/traditional_model.lag3.rda")
lsos()
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/B_cutoff80_frame60/glm_results.Lag.1.trad_large.rda")
x <- copy(glm_results.Lag.1.trad_large)
y <- results_preprocessor(x)
y
