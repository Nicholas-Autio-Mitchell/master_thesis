i=1
j=1
to_save
file_name
i
j
i=1
j=1
to_save
file_name
i
rm(i, j)
i=1
j=1
?get
lsos()
to_save
to_save
tail(A, n=3)
tail(A, n=1)
C
setdiff(C, ".rda")
setdiff(".rda", C)
setdiff(C, ".rda")
length(C)
nchar(C)
rm(list=ls())
lsos()
to_save
lsos()
lsos()
?do.call
to_save
C
B
get(B)
to_save
rm(list=ls())
lsos()
C
to_save
to_save
to_save
to_save
lsos()
lsos()
to_save
to_save
lsos()
rm(list=ls())
lsos()
rm(list=ls())
lsos()
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff70_frame40/renamed_vars/glm_results.L1.trad_small.rda")
lsos()
rm(list=ls())
lsos()
to_save
rm(list=ls())
rm(lsit=ls())
rm(list ==ls())
rm(list =ls())
lsos()
lsos()
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff70_frame40/correctly_named/glm_results.L4.sent_large.rda")
lsos()
glm_results.L4.sent_large$input_parameters
glm_results.L4.sent_large$results
lsos()
lsos()
lsos()
lsos()
rm(list=ls())
lsos()
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/B_cutoff70_frame60/correctly_named/glm_results.L5.combined.rda")
lsos()
x <- glm_results.L5.combined
names(x)
summary(x)
?foreach
lsos()
load("")
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff70_frame40/test_results/glm_results.L2.trad_small.rda")
lsos()
lsos()
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff70_frame40/correctly_named/glm_results.L4.combined.rda")
lsos()
for(i in 1:length(glm_results.L4.combined$results)){print(glm_results.L4.combined$results[[i]][[4]])}
for(i in 1:length(glm_results.L4.combined$results)){print(glm_results.L4.combined$results[[i]][[4]][[5]])}
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff70_frame40/correctly_named/glm_results.L3.combined.rda")
lsos()
x
dim(y)
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff70_frame40/correctly_named/glm_results.L3.trad_large.rda")
lsos()
z
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/B_cutoff70_frame60/correctly_named/glm_results.L1.combined.rda")
lsos()
j=1
to_save
to_save
i=1
file_name
i=3
j=2
to_save
to_save
file_name
rm(list=ls())
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff80_frame40/correctly_named/glm_results.L3.trad_small.rda")
lsos()
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff80_frame40/correctly_named/glm_results.L3.trad_large.rda")
lsos()
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff80_frame40/correctly_named/glm_results.L3.trad_large.rda")
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff80_frame40/correctly_named/glm_results.L3.sent_small.rda")
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff80_frame40/correctly_named/glm_results.L3.sent_large.rda")
load("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff80_frame40/correctly_named/glm_results.L3.combined.rda")
lsos()
rm(list=setdiff(ls(), c('glm_results.L3.combined')))
lsos()
rm(list=ls())
i=1
j=1
input_data
input_data.one_list
output_names
output_names[7]
i
to_save
to_save
file_name
Sys.time()
class(Sys.time())
)
i=22
names(input_data.one_list)
getwd()
setwd("/Volumes/Mac\ OS\ Drive/Documents/Dropbox/ultra/A_cutoff80_frame40/")
getwd()
this_folder
lsos()
my_par_results$Lag.4.combined$results$cv_1
my_par_results$Lag.4.combined$results$cv_2
my_par_results$Lag.4.trad_large$results$cv_1
my_par_results$Lag.4.trad_small$results$cv_1
my_par_results$Lag.4.sent_small$results$cv_1
my_par_results$Lag.4.sent_large$results$cv_1
lsos()
library(mboost)
library(caret)
library(data.table)
library(multilevelPSA)
library(doParallel)
source(paste0(this_folder, "/corr_pruner.R"))
source(paste0(this_folder, "/error_functions.R"))
this_folder <- getwd()
load(paste0(this_folder, "/subsets_lagged.rda"))
source(paste0(this_folder, "/corr_pruner.R"))
source(paste0(this_folder, "/error_functions.R"))
source(paste0(this_folder, "/results_template.R"))
source(paste0(this_folder, "/ultra_modeller.R"))
registerDoParallel(8)
input_data <- sapply(c("Lag.1", "Lag.2", "Lag.3", "Lag.4", "Lag.5"), function(x) NULL)
input_subsets <- sapply(c("trad_small", "trad_large", "sent_small", "sent_large", "combined"), function(x) NULL)
for(i in 1:length(input_data)){input_data[[i]] <- input_subsets}
raw_data <- copy(subsets_lagged)
for(i in 1:5) {
for(j in 1:5) {
input_data[[i]][[j]] <- corr_pruner(raw_data[[i]][[j]],
cutoff = 0.7,
plot = FALSE,
print.removed = FALSE)
}
}
input_data.one_list <- unlist(input_data, recursive = FALSE)
## Create vector holding the names of the input data to use when saving the output
output_names <- names(input_data.one_list)
all_results.glm_cutoff70_frame40 <- foreach(i = 1:length(input_data.one_list),
.combine = append,
.packages = c("mboost", "caret", "data.table")) %dopar%
{
tmp_results <- ultra_model(input_data.one_list[[i]], nIter = 2000,
shrinkage = 0.05, frame_size = 40)
to_save <- paste0("glm_results.", output_names[i])
assign(to_save, tmp_results)        #assign data to desired name
file_name <- paste0(to_save, ".rda") #create desired file name
save(list = to_save, file = file_name) #save data with desired names
##Print progress
print(paste0("Finished chunk: ", as.character(i), "/", as.character(length(input_data.one_list)),
" (", output_names[i], ")",
" at ", substr(as.character(Sys.time()), 1, 19)))
par_results <- list(tmp_results)
names(par_results) <- paste0(names(input_data.one_list[i]))
return(par_results)
}
rm(list=ls())
library(mboost)
library(caret)
library(data.table)
library(multilevelPSA)
library(doParallel)
this_folder <- getwd()
load(paste0(this_folder, "/subsets_lagged.rda"))
source(paste0(this_folder, "/corr_pruner.R"))
source(paste0(this_folder, "/error_functions.R"))
source(paste0(this_folder, "/results_template.R"))
source(paste0(this_folder, "/ultra_modeller.R"))
library(mboost)
library(caret)
library(data.table)
library(multilevelPSA)
library(doParallel)
this_folder <- getwd()
load(paste0(this_folder, "/subsets_lagged.rda"))
source(paste0(this_folder, "/corr_pruner.R"))
source(paste0(this_folder, "/error_functions.R"))
source(paste0(this_folder, "/results_template.R"))
source(paste0(this_folder, "/ultra_modeller.R"))
registerDoParallel(8)
input_data <- sapply(c("Lag.1", "Lag.2", "Lag.3", "Lag.4", "Lag.5"), function(x) NULL)
input_subsets <- sapply(c("trad_small", "trad_large", "sent_small", "sent_large", "combined"), function(x) NULL)
for(i in 1:length(input_data)){input_data[[i]] <- input_subsets}
raw_data <- copy(subsets_lagged)
for(i in 1:5) {
for(j in 1:5) {
input_data[[i]][[j]] <- corr_pruner(raw_data[[i]][[j]],
cutoff = 0.7,
plot = FALSE,
print.removed = FALSE)
}
}
## ---------------------------------------------------------- ##
##  Flatten the list so that all available cores can be used  ##
## ---------------------------------------------------------- ##
## Flatten
input_data.one_list <- unlist(input_data, recursive = FALSE)
## Create vector holding the names of the input data to use when saving the output
output_names <- names(input_data.one_list)
## Assign results to one parent object on top of saving each result individually
all_results.glm_cutoff70_frame40 <- foreach(i = 1:length(input_data.one_list),
.combine = append,
.packages = c("mboost", "caret", "data.table")) %dopar%
{
tmp_results <- ultra_model(input_data.one_list[[i]], nIter = 2000,
shrinkage = 0.05, frame_size = 40)
to_save <- paste0("glm_results.", output_names[i])
assign(to_save, tmp_results)        #assign data to desired name
file_name <- paste0(to_save, ".rda") #create desired file name
save(list = to_save, file = file_name) #save data with desired names
##Print progress
print(paste0("Finished chunk: ", as.character(i), "/", as.character(length(input_data.one_list)),
" (", output_names[i], ")",
" at ", substr(as.character(Sys.time()), 1, 19)))
par_results <- list(tmp_results)
names(par_results) <- paste0(names(input_data.one_list[i]))
return(par_results)
}
save(all_results.glm.cutoff70.frame40, file = "all_results.glm.cutoff70.frame40.rda")
all_results.glm.cutoff70.frame40 <- all_results.glm_cutoff70_frame40
save(all_results.glm.cutoff70.frame40, file = "all_results.glm.cutoff70.frame40.rda")
library(mboost)
library(caret)
library(data.table)
library(multilevelPSA)
library(doParallel)
this_folder <- getwd()
load(paste0(this_folder, "/subsets_lagged.rda"))
source(paste0(this_folder, "/corr_pruner.R"))
source(paste0(this_folder, "/error_functions.R"))
source(paste0(this_folder, "/results_template.R"))
source(paste0(this_folder, "/ultra_modeller.R"))
registerDoParallel(4)
input_data <- sapply(c("Lag.1", "Lag.2", "Lag.3", "Lag.4", "Lag.5"), function(x) NULL)
input_subsets <- sapply(c("trad_small", "trad_large", "sent_small", "sent_large", "combined"), function(x) NULL)
for(i in 1:length(input_data)){input_data[[i]] <- input_subsets}
## Assistance:
## subsets_lagged[[4]][[3]]   --> first index is the lag value, here Lag.4 [(i-1) = lag]
##                            --> second index is the subset.  1 = trad_small
##                                                             2 = trad_large
##                                                             3 = sent_small
##                                                             4 = sent_large
##                                                             5 = combined
## Need to run this each time too to take a fresh copy of the data. DOW.DP is removed by reference otherwise
raw_data <- copy(subsets_lagged)
for(i in 1:5) {
for(j in 1:5) {
input_data[[i]][[j]] <- corr_pruner(raw_data[[i]][[j]],
cutoff = 0.8,
plot = FALSE,
print.removed = FALSE,
s_name = names(input_data[[i]])[j])
}
}
## ---------------------------------------------------------- ##
##  Flatten the list so that all available cores can be used  ##
## ---------------------------------------------------------- ##
## Flatten
input_data.one_list <- unlist(input_data, recursive = FALSE)
## Create vector holding the names of the input data to use when saving the output
output_names <- names(input_data.one_list)
###################### ======================== ######################
######################  Run the data in a loop  ######################
###################### ======================== ######################
## ----------------------------------------- ##
##  Use foreach to work through all subsets  ##
## ----------------------------------------- ##
## Assign results to one parent object on top of saving each result individually
all_results.glm.cutoff80.frame80 <- foreach(i = 1:length(input_data.one_list),
.combine = append,
.packages = c("mboost", "caret", "data.table")) %dopar%
{
tmp_results <- ultra_model(input_data.one_list[[i]], nIter = 2000,
shrinkage = 0.05, frame_size = 80)
to_save <- paste0("glm_results.", output_names[i])
assign(to_save, tmp_results)        #assign data to desired name
file_name <- paste0(to_save, ".rda") #create desired file name
save(list = to_save, file = file_name) #save data with desired names
##Print progress
print(paste0("Finished chunk: ", as.character(i), "/", as.character(length(input_data.one_list)),
" (", output_names[i], ")",
" at ", substr(as.character(Sys.time()), 1, 19)))
par_results <- list(tmp_results)
names(par_results) <- paste0(names(input_data.one_list[i]))
return(par_results)
}
save(all_results.glm.cutoff80.frame80, file = "all_results.glm.cutoff80.frame80.rda")
