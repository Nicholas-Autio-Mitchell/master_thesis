library(mboost)
library(caret)
library(data.table)
library(doParallel)
this_folder <- getwd()
## The required data for all modelling
load(paste0(this_folder, "/subsets_lagged.rda"))
## Files that contain functions - they don't perform anything themselves
source(paste0(this_folder, "/corr_pruner.R"))
source(paste0(this_folder, "/error_functions.binomial.R"))
source(paste0(this_folder, "/results_template.binomial.R"))
source(paste0(this_folder, "/ultra_modeller.binomial.R"))
registerDoParallel(8)
input_data <- sapply(c("Lag.1", "Lag.2", "Lag.3", "Lag.4", "Lag.5"), function(x) NULL)
input_subsets <- sapply(c("trad_small", "trad_large", "sent_small", "sent_large", "combined"), function(x) NULL)
for(i in 1:length(input_data)){input_data[[i]] <- input_subsets}
## Assistance:
## subsets_lagged[[4]][[3]]   --> first index is the lag value, here Lag.4 [(i-1) = lag]
##                            --> second index is the subset.  1 = trad_small
##                                                             2 = trad_large
##                                                             3 = sent_small
##                                                             4 = sent_large
##                                                             5 = combined
## Need to run this each time too to take a fresh copy of the data. DOW.DP is removed by reference otherwise
raw_data <- copy(subsets_lagged)
for(i in 1:5) {
message(paste0("++ ----  ", names(raw_data)[i], "  ---- ++"))
for(j in 1:5) {
input_data[[i]][[j]] <- corr_pruner(raw_data[[i]][[j]],
cutoff = 0.3,
plot = FALSE,
print.removed = FALSE,
s_name = names(input_data[[i]])[j])
}
}
for(i in 1:5) {
for(j in 1:5) {
input_data[[i]][[j]][, DOW.bin := DOW.DP]       #create a new column to house the binomial repsonse
input_data[[i]][[j]][DOW.DP <= 0, DOW.bin := 0] #all returns less than or equal to zero, set to 0
input_data[[i]][[j]][DOW.DP > 0, DOW.bin := 1]  #all returns greater than zero, set to 1
input_data[[i]][[j]][, DOW.bin := as.factor(DOW.bin)] #outcome variable must be factor for Binomial()
## We no longer require the numeric Dow returns, so remove the column
input_data[[i]][[j]][, DOW.DP := NULL]
## Make the new binomial response the first column
setcolorder(input_data[[i]][[j]], neworder = c(ncol(input_data[[i]][[j]]), 1:(ncol(input_data[[i]][[j]]) - 1)))
}
}
input_data.one_list <- unlist(input_data, recursive = FALSE)
output_names <- names(input_data.one_list)
all_results.bin.cutoff30.frame40 <- foreach(i = 1:length(input_data.one_list),
.combine = append,
.packages = c("mboost", "caret", "data.table")) %dopar%
{
tmp_results <- bin_model(input_data.one_list[[i]], nIter = 2000,
shrinkage = 0.05, frame_size = 40)
to_save <- paste0("bin_results.", as.character(names(input_data.one_list)[[i]])) #desired name
assign(to_save, tmp_results)    #assign data to desired name
file_name <- paste0(to_save, ".rda") #create desired file name
save(list = to_save, file = file_name) #save data with desired names
##Print progress
print(paste0("Finished chunk: ", as.character(i), "/", as.character(length(input_data.one_list)),
" (", output_names[i], ")",
" at ", substr(as.character(Sys.time()), 1, 19)))
## Create a list of the results which is then appended to in ever foreach() loop
par_results <- list(tmp_results)
names(par_results) <- paste0(names(input_data.one_list[i]))
return(par_results)
}
## Save large object holding all results
save(all_results.bin.cutoff30.frame40, file = paste0(this_folder, "/all_results.bin.cutoff30.frame40.rda"))
